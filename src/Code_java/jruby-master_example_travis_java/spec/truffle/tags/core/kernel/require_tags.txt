fails:Kernel#require (path resolution) does not require file twice after $LOAD_PATH change
fails:Kernel#require (path resolution) with an unreadable file raises a LoadError
fails:Kernel#require ($LOAD_FEATURES) does not load a ./ relative path that is already stored
fails:Kernel#require ($LOAD_FEATURES) does not load a ../ relative path that is already stored
fails:Kernel#require ($LOAD_FEATURES) does not load a non-canonical path that is already stored
fails:Kernel#require ($LOAD_FEATURES) when a non-extensioned file is in $LOADED_FEATURES returns false if the file is not found
fails:Kernel#require ($LOAD_FEATURES) when a non-extensioned file is in $LOADED_FEATURES returns false when passed a path and the file is not found
fails:Kernel#require (shell expansion) performs tilde expansion on a .rb file before storing paths in $LOADED_FEATURES
fails:Kernel#require (shell expansion) performs tilde expansion on a non-extensioned file before storing paths in $LOADED_FEATURES
fails:Kernel.require (path resolution) does not require file twice after $LOAD_PATH change
fails:Kernel.require (path resolution) with an unreadable file raises a LoadError
fails:Kernel.require ($LOAD_FEATURES) does not load a ./ relative path that is already stored
fails:Kernel.require ($LOAD_FEATURES) does not load a ../ relative path that is already stored
fails:Kernel.require ($LOAD_FEATURES) does not load a non-canonical path that is already stored
fails:Kernel.require ($LOAD_FEATURES) when a non-extensioned file is in $LOADED_FEATURES returns false if the file is not found
fails:Kernel.require ($LOAD_FEATURES) when a non-extensioned file is in $LOADED_FEATURES returns false when passed a path and the file is not found
fails:Kernel.require (shell expansion) performs tilde expansion on a .rb file before storing paths in $LOADED_FEATURES
fails:Kernel.require (shell expansion) performs tilde expansion on a non-extensioned file before storing paths in $LOADED_FEATURES
slow:Kernel#require (concurrently) blocks based on the path
slow:Kernel.require (concurrently) blocks based on the path
