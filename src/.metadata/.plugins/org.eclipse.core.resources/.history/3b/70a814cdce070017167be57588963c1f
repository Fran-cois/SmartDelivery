
import java.net.*;
import java.util.logging.FileHandler;
import java.util.logging.Handler;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import java.util.*;
import java.io.*;

public class KnockKnockServer {
	public static Logger logger = Logger.getLogger(KnockKnockServer.class.getName());
	static Handler fh;
	private Vector _tabClients = new Vector(); // contiendra tous les flux de sortie vers les clients
	  private int _nbClients=0; // nombre total de clients connectés

	  //** Methode : la première méthode exécutée, elle attend les connections **
    public static void main(String[] args) throws IOException {
    	fh= new FileHandler("logfileServer_%u.log");
    	logger.addHandler(fh);
    	SimpleFormatter formatter=new SimpleFormatter();
    	fh.setFormatter(formatter);
    	KnockKnockServer blablaServ = new KnockKnockServer(); // instance de la classe principale
        if (args.length != 1) {
            // num port (80 ex )
            logger.severe("Usage: java KnockKnockServer <port number>");
            System.exit(1);
        }

        int portNumber = Integer.parseInt(args[0]);

        try {
             //SOCKET tcp/ip  + creation fichiers (lire + ecrire)
            ServerSocket serverSocket = new ServerSocket(portNumber);
            printWelcome(portNumber);
        	while (true) // attente en boucle de connexion (bloquant sur ss.accept)
        	{
        		new BlablaThread(serverSocket.accept(),KnockKnockServer); // un client se connecte, un nouveau thread client est lancé
        	}
            Socket clientSocket = serverSocket.accept();
        	PrintWriter out =
                        new PrintWriter(clientSocket.getOutputStream(), true);
            BufferedReader in = new BufferedReader(
                        new InputStreamReader(clientSocket.getInputStream())); 
        } catch (IOException e) {
            logger.severe("Exception caught when trying to listen on port " + portNumber + " or listening for a connection");
            logger.severe(e.getMessage());
        }
        
      //** Methode : affiche le message d'accueil **
        static private void printWelcome(Integer port)
        {
          System.out.println("--------");
          System.out.println("BlablaServeur : Par Minosis - Julien Defaut");
          System.out.println("Copyright : 2004 - Minosis.com");
          System.out.println("Derniere version : 10/04/2004");
          System.out.println("--------");
          System.out.println("Demarre sur le port : "+port.toString());
          System.out.println("--------");
          System.out.println("Quitter : tapez \"quit\"");
          System.out.println("Nombre de connectes : tapez \"total\"");
          System.out.println("--------");
        }
        
        {
        	String inputLine, outputLine;
            
            // Initiate conversation with client
            // PROTOCOLE : PROTOCOLE SERVER (PROCESS INPUT)
            ProtocolServer kkp = new ProtocolServer();
            outputLine = kkp.processInput(null);
            out.println(outputLine);
            // traitement des reaction
            while ((inputLine = in.readLine()) != null) {
            	
            	if (inputLine.contains("go to the room ")){
            		ProtocolServer.finalRoom=inputLine.substring(15);
            		logger.info("Serveur: the final room is "+ProtocolServer.finalRoom);
            	}
                outputLine = kkp.processInput(inputLine);
                out.println(outputLine);
                logger.info("Serveur: " + outputLine);
                // fin de la communication -> a faire : couper la communication avec un seul client.
                if (outputLine.equals("Bye. I arrived."))
                    break;
            }
       
    }
}
